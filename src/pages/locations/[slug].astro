---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import HeaderNav from '../../components/HeaderNav.astro';
import FeaturedImage from '../../components/FeaturedImage.astro';
import LeadWebformCTA from '../../components/LeadWebformCTA.astro';
import SEO from '../../components/SEO.astro';
import Footer from '../../components/Footer.astro'; 

// ‚úÖ Generate all location pages (major_city, suburb, neighborhood)
export async function getStaticPaths() {
  const locations = await getCollection('locations');
  return locations.map((location) => ({
    params: { slug: location.slug },
    props: { location },
  }));
}

const { location } = Astro.props;
const services = await getCollection('services');
const allLocations = await getCollection('locations');
const { Content: LocationContent } = await location.render();

// ‚úÖ Interlinking logic
const majorServices = services.slice(0, 6);
const isMajorCity = location.data.type === 'major_city';

const associatedSuburbs = isMajorCity 
  ? allLocations.filter(loc => loc.data.type === 'suburb' && loc.data.parent_slug === location.slug)
  : [];

const associatedNeighborhoods = isMajorCity 
  ? allLocations.filter(loc => loc.data.type === 'neighborhood' && loc.data.parent_slug === location.slug)
  : [];

const parentCity = (location.data.type === 'suburb' || location.data.type === 'neighborhood')
  ? allLocations.find(loc => loc.slug === location.data.parent_slug)
  : null;
---

<Layout title={location.data.meta_title || `Personal Training in ${location.data.city}, ${location.data.state}`}>
  <HeaderNav />
  <SEO 
    title={location.data.meta_title || `Personal Training in ${location.data.city}, ${location.data.state}`}
    description={location.data.meta_description || `Find certified personal trainers in ${location.data.city}, ${location.data.state}. Custom workout plans and fitness programs.`}
    canonical={`/locations/${location.slug}/`}
  />

  <main class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 py-8">
      <article class="bg-white rounded-lg shadow-sm p-8 mb-8">
        
        <!-- üèôÔ∏è HERO SECTION -->
        <header class="text-center mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            Personal Training in {location.data.city}, {location.data.state}
          </h1>
          {parentCity && (
            <p class="text-lg text-gray-600">
              Serving the {parentCity.data.city} area
            </p>
          )}
        </header>
        
        {location.data.hero_image && (
          <FeaturedImage 
            src={location.data.hero_image}
            alt={`Personal training in ${location.data.city}, ${location.data.state}`}
            loading="lazy"
            className="mb-8"
          />
        )}

        <!-- üßæ MAIN CONTENT -->
        <div class="prose prose-lg max-w-none mb-8">
          <LocationContent />
        </div>

        <!-- üí™ SERVICES GRID -->
        <section class="mt-12">
          <h2 class="text-2xl font-bold mb-6 text-center">
            Available Training Services in {location.data.city}
          </h2>
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
            {majorServices.map((service) => (
              <a 
                href={`/${location.slug}/${service.slug}`}
                aria-label={`Learn more about ${service.data.name} in ${location.data.city}`}
                class="bg-primary-50 text-primary-700 p-4 rounded-lg text-center hover:bg-primary-100 transition-colors font-semibold"
              >
                {service.data.name}
              </a>
            ))}
          </div>
        </section>

        <!-- üèòÔ∏è NEIGHBORHOODS -->
        {associatedNeighborhoods.length > 0 && (
          <section class="mt-12">
            <h2 class="text-2xl font-bold mb-6 text-center">
              Popular Neighborhoods in {location.data.city}
            </h2>
            <div class="grid md:grid-cols-4 lg:grid-cols-6 gap-3">
              {associatedNeighborhoods.map((hood) => (
                <a 
                  href={`/locations/${hood.slug}`}
                  class="bg-blue-50 text-blue-700 p-3 rounded-lg text-center text-sm hover:bg-blue-100 transition-colors"
                  aria-label={`View personal training in ${hood.data.city}`}
                >
                  {hood.data.city}
                </a>
              ))}
            </div>
          </section>
        )}

        <!-- üåÜ SUBURBS -->
        {associatedSuburbs.length > 0 && (
          <section class="mt-12">
            <h2 class="text-2xl font-bold mb-6 text-center">
              Serving the Greater {location.data.city} Area
            </h2>
            <div class="grid md:grid-cols-3 lg:grid-cols-4 gap-4">
              {associatedSuburbs.map((suburb) => (
                <a 
                  href={`/locations/${suburb.slug}`}
                  class="bg-gray-100 text-gray-700 p-4 rounded-lg text-center hover:bg-gray-200 transition-colors"
                  aria-label={`Find personal trainers in ${suburb.data.city}`}
                >
                  {suburb.data.city}
                </a>
              ))}
            </div>
          </section>
        )}

        <!-- üîô BACKLINK -->
        {parentCity && (
          <div class="mt-8 text-center">
            <a 
              href={`/locations/${parentCity.slug}`}
              class="text-primary-600 hover:text-primary-700 font-semibold"
              aria-label={`Back to ${parentCity.data.city} main page`}
            >
              ‚Üê Back to {parentCity.data.city} Main Page
            </a>
          </div>
        )}
      </article>

      <LeadWebformCTA pageSlug={`locations/${location.slug}`} />
    </div>
  </main>

  <!-- üìä Structured Data -->
  <script type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "LocalBusiness",
      "name": `Personal Trainers in ${location.data.city}`,
      "description": location.data.meta_description || `Find certified personal trainers in ${location.data.city}, ${location.data.state}.`,
      "image": location.data.hero_image ? location.data.hero_image : undefined,
      "address": {
        "@type": "PostalAddress",
        "addressLocality": location.data.city,
        "addressRegion": location.data.state,
        "addressCountry": "US"
      },
      "areaServed": location.data.city,
      "hasOfferCatalog": {
        "@type": "OfferCatalog",
        "name": "Training Services",
        "itemListElement": services.map((s) => ({
          "@type": "Offer",
          "itemOffered": {
            "@type": "Service",
            "name": s.data.name
          }
        }))
      },
      "provider": {
        "@type": "Organization",
        "name": "Personal Trainer City",
        "url": "https://personaltrainercity.com"
      }
    })}
  </script>

  <Footer />
</Layout>

